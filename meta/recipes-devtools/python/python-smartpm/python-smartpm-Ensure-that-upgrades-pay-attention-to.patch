smart: Ensure that upgrades pay attention to arch

Previously smart considered all architectures to be the same.  However this
is not what users want during an upgrade transaction.  In a multilib
system, they would like the architecture to be preserved during the upgrade.

For instance, if a system is primarily arch corei7_64, but the user installed
krb5 with the arch of lib32_core2_32, they don't want the upgrade to "move"
to the corei7_64 version.

The change to transaction.py below makes sure that the architecture of the
item being upgraded is checked BEFORE the priority.  This way if the arch does
not match, the next item is examined.  If the arch DOES match, then we can use
the priority to find the 'best match'.

This change triggers a failure where some upgrades become "remove" and then
"install" operations.  The change the backends/rpm/pm.py resolves this by
changing the way we determine if it's an upgrade or individual operations.

Upstream-Status: Pending

Signed-off-by: Mark Hatle <mark.hatle@windriver.com>

Index: smart-1.4.1/smart/transaction.py
===================================================================
--- smart-1.4.1.orig/smart/transaction.py
+++ smart-1.4.1/smart/transaction.py
@@ -1181,9 +1181,13 @@ class Transaction(object):
             _upgpkgs = {}
             try:
                 pkgpriority = pkg.getPriority()
+                pkgarch = pkg.version.split("@")[1]
                 for prv in pkg.provides:
                     for upg in prv.upgradedby:
                         for upgpkg in upg.packages:
+                            # Limit upgrades to packages of the same arch
+                            if upgpkg.version.split("@")[1] != pkgarch:
+                                continue
                             if upgpkg.getPriority() < pkgpriority:
                                 continue
                             if isinst(upgpkg):
@@ -1192,6 +1196,9 @@ class Transaction(object):
                 for upg in pkg.upgrades:
                     for prv in upg.providedby:
                         for prvpkg in prv.packages:
+                            # Limit upgrades to packages of the same arch
+                            if prvpkg.version.split("@")[1] != pkgarch:
+                                continue
                             if prvpkg.getPriority() <= pkgpriority:
                                 continue
                             if isinst(prvpkg):
Index: smart-1.4.1/smart/backends/rpm/pm.py
===================================================================
--- smart-1.4.1.orig/smart/backends/rpm/pm.py
+++ smart-1.4.1/smart/backends/rpm/pm.py
@@ -71,13 +71,14 @@ class RPMPackageManager(PackageManager):
                                        if prvpkg.installed])
                 if upgpkgs:
                     for upgpkg in upgpkgs:
-                        # If any upgraded package will stay in the system,
-                        # this is not really an upgrade for rpm.
-                        if changeset.get(upgpkg) is not REMOVE:
-                            break
-                    else:
-                        upgrading[pkg] = True
-                        for upgpkg in upgpkgs:
+                        # If a package of the same name (and arch) is 'removed'
+                        # and 'installed' we must tag this as an upgrade
+                        if pkg.name == upgpkg.name and \
+                           pkg.version.split("@")[1] == upgpkg.version.split("@")[1] and \
+                           changeset.get(upgpkg) is REMOVE:
+                            # Since we're iterating over the installs, only look
+                            # for REMOVES
+                            upgrading[pkg] = True
                             upgraded[upgpkg] = True
                             if upgpkg in changeset:
                                 del changeset[upgpkg]
-- 
2.5.0

