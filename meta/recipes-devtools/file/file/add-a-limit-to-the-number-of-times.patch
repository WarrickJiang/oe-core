add a limit to the number of times a name/use entries can be used.

Upstream-Status: Backport [file]

Written-by: Christos Zoulas <christos@zoulas.com>

diff -Nur file-5.18.orig/src/apprentice.c file-5.18/src/apprentice.c
--- file-5.18.orig/src/apprentice.c	2015-02-15 12:06:49.499652878 +0800
+++ file-5.18/src/apprentice.c	2015-02-15 12:07:09.624570015 +0800
@@ -508,6 +508,7 @@
 	ms->line = 0;
 	ms->indir_recursion = FILE_INDIR_RECURSION;
 	ms->name_recursion = FILE_NAME_RECURSION;
+	ms->name_max = FILE_NAME_MAX;
 	ms->shnum_max = FILE_ELF_SHNUM;
 	ms->phnum_max = FILE_ELF_PHNUM;
 	return ms;
diff -Nur file-5.18.orig/src/ascmagic.c file-5.18/src/ascmagic.c
--- file-5.18.orig/src/ascmagic.c	2015-02-15 12:06:49.499652878 +0800
+++ file-5.18/src/ascmagic.c	2015-02-15 12:07:09.625652953 +0800
@@ -147,7 +147,8 @@
 		    == NULL)
 			goto done;
 		if ((rv = file_softmagic(ms, utf8_buf,
-		    (size_t)(utf8_end - utf8_buf), 0, 0, TEXTTEST, text)) == 0)
+		    (size_t)(utf8_end - utf8_buf), 0, 0, NULL,
+		    TEXTTEST, text)) == 0)
 			rv = -1;
 	}
 
diff -Nur file-5.18.orig/src/file.c file-5.18/src/file.c
--- file-5.18.orig/src/file.c	2015-02-15 12:06:49.499652878 +0800
+++ file-5.18/src/file.c	2015-02-15 12:07:09.625652953 +0800
@@ -126,6 +126,7 @@
 } pm[] = {
 	{ "indir",	MAGIC_PARAM_INDIR_RECURSION, 0 },
 	{ "name",	MAGIC_PARAM_NAME_RECURSION, 0 },
+	{ "namenum",	MAGIC_PARAM_NAME_MAX, 0 },
 	{ "phnum",	MAGIC_PARAM_PHNUM_MAX, 0 },
 	{ "shnum",	MAGIC_PARAM_SHNUM_MAX, 0 },
 };
diff -Nur file-5.18.orig/src/file.h file-5.18/src/file.h
--- file-5.18.orig/src/file.h	2015-02-15 12:06:49.499652878 +0800
+++ file-5.18/src/file.h	2015-02-15 12:07:09.625652953 +0800
@@ -402,12 +402,14 @@
 	union VALUETYPE ms_value;	/* either number or string */
 	uint16_t indir_recursion;
 	uint16_t name_recursion;
+	uint16_t name_max;
 	uint16_t shnum_max;
 	uint16_t phnum_max;
 #define	FILE_INDIR_RECURSION	15
 #define	FILE_NAME_RECURSION	40
-#define FILE_ELF_SHNUM		32768
-#define FILE_ELF_PHNUM		128
+#define	FILE_NAME_MAX		30
+#define	FILE_ELF_SHNUM		32768
+#define	FILE_ELF_PHNUM		128
 };
 
 /* Type for Unicode characters */
@@ -447,7 +449,7 @@
     unichar **, size_t *, const char **, const char **, const char **);
 protected int file_is_tar(struct magic_set *, const unsigned char *, size_t);
 protected int file_softmagic(struct magic_set *, const unsigned char *, size_t,
-    uint16_t, uint16_t, int, int);
+    uint16_t, uint16_t, uint16_t *, int, int);
 protected int file_apprentice(struct magic_set *, const char *, int);
 protected int file_magicfind(struct magic_set *, const char *, struct mlist *);
 protected uint64_t file_signextend(struct magic_set *, struct magic *,
diff -Nur file-5.18.orig/src/funcs.c file-5.18/src/funcs.c
--- file-5.18.orig/src/funcs.c	2015-02-15 12:06:49.499652878 +0800
+++ file-5.18/src/funcs.c	2015-02-15 12:07:09.625652953 +0800
@@ -230,7 +230,7 @@
 
 	/* try soft magic tests */
 	if ((ms->flags & MAGIC_NO_CHECK_SOFT) == 0)
-		if ((m = file_softmagic(ms, ubuf, nb, 0, 0, BINTEST,
+		if ((m = file_softmagic(ms, ubuf, nb, 0, 0, NULL, BINTEST,
 		    looks_text)) != 0) {
 			if ((ms->flags & MAGIC_DEBUG) != 0)
 				(void)fprintf(stderr, "softmagic %d\n", m);
diff -Nur file-5.18.orig/src/magic.c file-5.18/src/magic.c
--- file-5.18.orig/src/magic.c	2015-02-15 12:06:49.498652943 +0800
+++ file-5.18/src/magic.c	2015-02-15 12:07:09.625652953 +0800
@@ -501,6 +501,9 @@
 	case MAGIC_PARAM_NAME_RECURSION:
 		ms->name_recursion = *(const size_t *)val;
 		return 0;
+	case MAGIC_PARAM_NAME_MAX:
+		ms->name_max = *(const size_t *)val;
+		return 0;
 	case MAGIC_PARAM_PHNUM_MAX:
 		ms->phnum_max = *(const size_t *)val;
 		return 0;
@@ -523,6 +526,9 @@
 	case MAGIC_PARAM_NAME_RECURSION:
 		*(size_t *)val = ms->name_recursion;
 		return 0;
+	case MAGIC_PARAM_NAME_MAX:
+		*(size_t *)val = ms->name_max;
+		return 0;
 	case MAGIC_PARAM_PHNUM_MAX:
 		*(size_t *)val = ms->phnum_max;
 		return 0;
diff -Nur file-5.18.orig/src/magic.h file-5.18/src/magic.h
--- file-5.18.orig/src/magic.h	2015-02-15 12:06:49.499652878 +0800
+++ file-5.18/src/magic.h	2015-02-15 12:07:09.625652953 +0800
@@ -103,8 +103,9 @@
 
 #define MAGIC_PARAM_INDIR_RECURSION	0
 #define MAGIC_PARAM_NAME_RECURSION	1
-#define MAGIC_PARAM_PHNUM_MAX		2
-#define MAGIC_PARAM_SHNUM_MAX		3
+#define MAGIC_PARAM_NAME_MAX		2
+#define MAGIC_PARAM_PHNUM_MAX		3
+#define MAGIC_PARAM_SHNUM_MAX		4
 
 int magic_setparam(magic_t, int, const void *);
 int magic_getparam(magic_t, int, void *);
diff -Nur file-5.18.orig/src/magic.h.in file-5.18/src/magic.h.in
--- file-5.18.orig/src/magic.h.in	2015-02-15 12:06:49.499652878 +0800
+++ file-5.18/src/magic.h.in	2015-02-15 12:07:09.626652896 +0800
@@ -103,8 +103,9 @@
 
 #define MAGIC_PARAM_INDIR_RECURSION	0
 #define MAGIC_PARAM_NAME_RECURSION	1
-#define MAGIC_PARAM_PHNUM_MAX		2
-#define MAGIC_PARAM_SHNUM_MAX		3
+#define MAGIC_PARAM_NAME_MAX		2
+#define MAGIC_PARAM_PHNUM_MAX		3
+#define MAGIC_PARAM_SHNUM_MAX		4
 
 int magic_setparam(magic_t, int, const void *);
 int magic_getparam(magic_t, int, void *);
diff -Nur file-5.18.orig/src/softmagic.c file-5.18/src/softmagic.c
--- file-5.18.orig/src/softmagic.c	2015-02-15 12:06:49.499652878 +0800
+++ file-5.18/src/softmagic.c	2015-02-15 12:10:31.575652841 +0800
@@ -49,10 +49,10 @@
 
 private int match(struct magic_set *, struct magic *, uint32_t,
     const unsigned char *, size_t, size_t, int, int, int, uint16_t, uint16_t,
-    int *, int *, int *);
+    uint16_t *, int *, int *, int *);
 private int mget(struct magic_set *, const unsigned char *,
     struct magic *, size_t, size_t, unsigned int, int, int, int, uint16_t,
-    uint16_t, int *, int *, int *);
+    uint16_t, uint16_t *, int *, int *, int *);
 private int magiccheck(struct magic_set *, struct magic *);
 private int32_t mprint(struct magic_set *, struct magic *);
 private int32_t moffset(struct magic_set *, struct magic *);
@@ -76,14 +76,22 @@
 /*ARGSUSED1*/		/* nbytes passed for regularity, maybe need later */
 protected int
 file_softmagic(struct magic_set *ms, const unsigned char *buf, size_t nbytes,
-    uint16_t indir_level, uint16_t name_level, int mode, int text)
+    uint16_t indir_level, uint16_t name_level, uint16_t *name_count,
+	int mode, int text)
 {
 	struct mlist *ml;
 	int rv, printed_something = 0, need_separator = 0;
+	uint16_t nc;
+
+	if (name_count == NULL) {
+		nc = 0;
+		name_count = &nc;
+	}
+
 	for (ml = ms->mlist[0]->next; ml != ms->mlist[0]; ml = ml->next)
 		if ((rv = match(ms, ml->magic, ml->nmagic, buf, nbytes, 0, mode,
-		    text, 0, indir_level, name_level, &printed_something,
-		    &need_separator, NULL)) != 0)
+		    text, 0, indir_level, name_level, name_count,
+		    &printed_something, &need_separator, NULL)) != 0)
 			return rv;
 
 	return 0;
@@ -119,8 +127,8 @@
 private int
 match(struct magic_set *ms, struct magic *magic, uint32_t nmagic,
     const unsigned char *s, size_t nbytes, size_t offset, int mode, int text,
-    int flip, uint16_t indir_level, uint16_t name_level, int *printed_something,
-    int *need_separator, int *returnval)
+    int flip, uint16_t indir_level, uint16_t name_level, uint16_t *name_count,
+    int *printed_something, int *need_separator, int *returnval)
 {
 	uint32_t magindex = 0;
 	unsigned int cont_level = 0;
@@ -157,8 +165,8 @@
 
 		/* if main entry matches, print it... */
 		switch (mget(ms, s, m, nbytes, offset, cont_level, mode, text,
-		    flip, indir_level, name_level, printed_something,
-		    need_separator, returnval)) {
+		    flip, indir_level, name_level, name_count,
+		    printed_something, need_separator, returnval)) {
 		case -1:
 			return -1;
 		case 0:
@@ -246,7 +254,7 @@
 			}
 #endif
 			switch (mget(ms, s, m, nbytes, offset, cont_level, mode,
-			    text, flip, indir_level, name_level,
+			    text, flip, indir_level, name_level, name_count,
 			    printed_something, need_separator, returnval)) {
 			case -1:
 				return -1;
@@ -1156,8 +1164,8 @@
 private int
 mget(struct magic_set *ms, const unsigned char *s, struct magic *m,
     size_t nbytes, size_t o, unsigned int cont_level, int mode, int text,
-    int flip, uint16_t indir_level, uint16_t name_level, int *printed_something,
-    int *need_separator, int *returnval)
+    int flip, uint16_t indir_level, uint16_t name_level, uint16_t *name_count,
+    int *printed_something, int *need_separator, int *returnval)
 {
 	uint32_t offset = ms->offset;
 	uint32_t count = m->str_range;
@@ -1179,14 +1187,22 @@
 		return -1;
 	}
 
+	if (*name_count >= ms->name_max) {
+		file_error(ms, 0, "name use count (%hu) exceeded",
+		    *name_count);
+		return -1;
+	}
+
 	if (mcopy(ms, p, m->type, m->flag & INDIR, s, (uint32_t)(offset + o),
 	    (uint32_t)nbytes, count) == -1)
 		return -1;
 
 	if ((ms->flags & MAGIC_DEBUG) != 0) {
-		fprintf(stderr, "mget(type=%d, flag=%x, offset=%u, o=%zu, "
-		    "nbytes=%zu, count=%u)\n", m->type, m->flag, offset, o,
-		    nbytes, count);
+		fprintf(stderr, "mget(type=%d, flag=%x, offset=%u, o=%"
+		    SIZE_T_FORMAT "u, " "nbytes=%" SIZE_T_FORMAT
+		    "u, il=%hu, nl=%hu nc=%hu)\n",
+		    m->type, m->flag, offset, o, nbytes,
+		    indir_level, name_level, *name_count);
 		mdebug(offset, (char *)(void *)p, sizeof(union VALUETYPE));
 #ifndef COMPILE_ONLY
 		file_mdump(m);
@@ -1758,7 +1774,7 @@
 			return -1;
 
 		rv = file_softmagic(ms, s + offset, nbytes - offset,
-		    indir_level + 1, name_level, BINTEST, text);
+		    indir_level + 1, name_level, name_count, BINTEST, text);
 
 		if ((ms->flags & MAGIC_DEBUG) != 0)
 			fprintf(stderr, "indirect @offs=%u[%d]\n", offset, rv);
@@ -1793,12 +1809,12 @@
 			file_error(ms, 0, "cannot find entry `%s'", rbuf);
 			return -1;
 		}
-
+		(*name_count)++;
 		oneed_separator = *need_separator;
 		if (m->flag & NOSPACE)
 			*need_separator = 0;
 		rv = match(ms, ml.magic, ml.nmagic, s, nbytes, offset + o,
-		    mode, text, flip, indir_level, name_level + 1,
+		    mode, text, flip, indir_level, name_level + 1, name_count,
 		    printed_something, need_separator, returnval);
 		if (rv != 1)
 		    *need_separator = oneed_separator;
