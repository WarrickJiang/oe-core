--- a/boost/pool/pool.hpp.orig	
+++ b/boost/pool/pool.hpp	
@@ -11,6 +11,8 @@
 
 #include <boost/config.hpp>  // for workarounds
 
+// std::numeric_limits 
+#include <boost/limits.hpp> 
 // std::less, std::less_equal, std::greater
 #include <functional>
 // new[], delete[], std::nothrow
@@ -792,7 +794,8 @@
 { //! Gets address of a chunk n, allocating new memory if not already available.
   //! \returns Address of chunk n if allocated ok.
   //! \returns 0 if not enough memory for n chunks.
-
+  if (requested_size && (n > (std::numeric_limits<size_type>::max)() / requested_size)) 
+	return 0; 
   const size_type partition_size = alloc_size();
   const size_type total_req_size = n * requested_size;
   const size_type num_chunks = total_req_size / partition_size +
@@ -975,6 +978,8 @@
   {
      if(max_alloc_size && (n > max_alloc_size))
         return 0;
+	 if(chunk_size && (n > (std::numeric_limits<size_type>::max)() / chunk_size)) 
+		return 0; 
      void* ret = (user_allocator::malloc)(chunk_size * n);
      used_list.insert(ret);
      return ret;
