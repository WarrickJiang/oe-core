Summary: db: add debug_lock option to show diagnostic info

add debug_lock into configure to show diagnostic info

Upstream-Status: Pending

Signed-off-by: Zhixiong Chi <zhixiong.chi@windriver.com>
Index: db-6.0.30/dist/config.hin
===================================================================
--- db-6.0.30.orig/dist/config.hin	2014-01-25 03:09:41.000000000 +0800
+++ db-6.0.30/dist/config.hin	2015-07-08 11:00:26.677560994 +0800
@@ -21,6 +21,9 @@
 /* Define to 1 if you want a version that logs write operations. */
 #undef DEBUG_WOP
 
+/* Define to 1 if you want a version that logs write/read lock operations. */
+#undef DEBUG_LOCK
+
 /* Define to 1 if you want a version with run-time diagnostic checking. */
 #undef DIAGNOSTIC
 
Index: db-6.0.30/dist/configure
===================================================================
--- db-6.0.30.orig/dist/configure	2014-01-25 03:09:41.000000000 +0800
+++ db-6.0.30/dist/configure	2015-07-08 11:03:05.817560597 +0800
@@ -862,6 +862,7 @@
 enable_debug
 enable_debug_rop
 enable_debug_wop
+enable_debug_lock
 enable_diagnostic
 enable_dump185
 enable_java
@@ -1556,6 +1557,7 @@
   --enable-debug          Build a debugging version.
   --enable-debug_rop      Build a version that logs read operations.
   --enable-debug_wop      Build a version that logs write operations.
+  --enable-debug_lock     Build a version that logs write/read lock operations.
   --enable-diagnostic     Build a version with run-time diagnostics.
   --enable-dump185        Build db_dump185(1) to dump 1.85 databases.
   --enable-java           Build Java API.
@@ -3323,6 +3325,18 @@
 { $as_echo "$as_me:${as_lineno-$LINENO}: result: $db_cv_debug_wop" >&5
 $as_echo "$db_cv_debug_wop" >&6; }
 
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking if --enable-debug_lock option specified" >&5
+$as_echo_n "checking if --enable-debug_lock option specified... " >&6; }
+# Check whether --enable-debug_lock was given.
+if test "${enable_debug_lock+set}" = set; then :
+  enableval=$enable_debug_lock; db_cv_debug_lock="$enable_debug_lock"
+else
+  db_cv_debug_lock="no"
+fi
+
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $db_cv_debug_lock" >&5
+$as_echo "$db_cv_debug_lock" >&6; }
+
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking if --enable-diagnostic option specified" >&5
 $as_echo_n "checking if --enable-diagnostic option specified... " >&6; }
 # Check whether --enable-diagnostic was given.
@@ -3835,6 +3849,11 @@
 
 
 fi
+if test "$db_cv_debug_lock" = "yes"; then
+      $as_echo "#define DEBUG_LOCK 1" >>confdefs.h
+
+
+fi
 if test "$db_cv_umrw" = "yes"; then
 	$as_echo "#define UMRW 1" >>confdefs.h
 
Index: db-6.0.30/dist/configure.ac
===================================================================
--- db-6.0.30.orig/dist/configure.ac	2014-01-25 03:09:41.000000000 +0800
+++ db-6.0.30/dist/configure.ac	2015-07-08 11:03:45.925560497 +0800
@@ -134,6 +134,11 @@
 	AH_TEMPLATE(DEBUG_WOP,
     [Define to 1 if you want a version that logs write operations.])
 fi
+if test "$db_cv_debug_lock" = "yes"; then
+      AC_DEFINE(DEBUG_LOCK)
+      AH_TEMPLATE(DEBUG_LOCK,
+    [Define to 1 if you want a version that logs write/read lock operations.])
+fi
 if test "$db_cv_umrw" = "yes"; then
 	AC_DEFINE(UMRW)
 	AH_TEMPLATE(UMRW,
Index: db-6.0.30/src/common/db_err.c
===================================================================
--- db-6.0.30.orig/src/common/db_err.c	2014-01-25 03:09:50.000000000 +0800
+++ db-6.0.30/src/common/db_err.c	2015-07-08 11:07:15.301559975 +0800
@@ -648,6 +648,31 @@
 }
 
 /*
+ * __db_lock_msg --
+ *    Standard DB lock stat message routine.
+ *
+ * PUBLIC: void __db_lock_msg __P((const ENV *, const char *, ...))
+ * PUBLIC:    __attribute__ ((__format__ (__printf__, 2, 3)));
+ */
+void
+#ifdef STDC_HEADERS
+__db_lock_msg(const ENV *env, const char *fmt, ...)
+#else
+__db_lock_msg(env, fmt, va_alist)
+      const ENV *env;
+      const char *fmt;
+      va_dcl
+#endif
+{
+      DB_ENV *dbenv;
+
+      dbenv = env == NULL ? NULL : env->dbenv;
+#if defined(DEBUG_LOCK)
+      DB_REAL_MSG(dbenv, fmt);
+#endif
+}
+
+/*
  * __db_repmsg --
  *	Replication system message routine.
  *
Index: db-6.0.30/src/lock/lock_failchk.c
===================================================================
--- db-6.0.30.orig/src/lock/lock_failchk.c	2014-01-25 03:09:51.000000000 +0800
+++ db-6.0.30/src/lock/lock_failchk.c	2015-07-08 11:06:22.053560108 +0800
@@ -80,7 +80,7 @@
 			 * Discard the locker and its read locks.
 			 */
 			if (!SH_LIST_EMPTY(&lip->heldby)) {
-				__db_msg(env, DB_STR_A("2053",
+				__db_lock_msg(env, DB_STR_A("2053",
 				    "Freeing read locks for locker %#lx: %s",
 				    "%#lx %s"), (u_long)lip->id,
 				    dbenv->thread_id_string(
Index: db-6.0.30/src/mutex/mut_failchk.c
===================================================================
--- db-6.0.30.orig/src/mutex/mut_failchk.c	2014-01-25 03:09:51.000000000 +0800
+++ db-6.0.30/src/mutex/mut_failchk.c	2015-07-08 11:06:37.589560069 +0800
@@ -60,7 +60,7 @@
 		    dbenv, mutexp->pid, unused, DB_MUTEX_PROCESS_ONLY))
 			continue;
 
-		__db_msg(env, DB_STR_A("2017",
+		__db_lock_msg(env, DB_STR_A("2017",
 		    "Freeing mutex %lu for process: %s", "%lu %s"), (u_long)i,
 		    dbenv->thread_id_string(dbenv, mutexp->pid, unused, buf));
 
