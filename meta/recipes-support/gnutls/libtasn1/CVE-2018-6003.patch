From 1f1fd055815d6f2564eef74b76913dfdbc5e9c61 Mon Sep 17 00:00:00 2001
From: Zhenbo Gao <zhenbo.gao@windriver.com>
Date: Fri, 2 Feb 2018 17:04:24 +0800
Subject: [PATCH] _asn1_decode_simple_ber: restrict the levels of recursion to
 3

On indefinite string decoding, setting a maximum level of
recursions protects the BER decoder from a stack exhaustion
due to large amounts of recursion.

backport patch from:
http://git.savannah.nongnu.org/cgit/libtasn1.git/commit/?\
  id=c593ae84cfcde8fea45787e53950e0ac71e9ca97

Upstream-Status: Backport

Signed-off-by: Nikos Mavrogiannopoulos <nmav@redhat.com>
Signed-off-by: Zhenbo Gao <zhenbo.gao@windriver.com>
---
 lib/decoding.c | 23 ++++++++++++++++++++---
 1 file changed, 20 insertions(+), 3 deletions(-)

diff --git a/lib/decoding.c b/lib/decoding.c
index 2cd9ac3..70b62d4 100644
--- a/lib/decoding.c
+++ b/lib/decoding.c
@@ -46,6 +46,14 @@
 #define DECODE_FLAG_HAVE_TAG 1
 #define DECODE_FLAG_INDEFINITE (1<<1)
 
+/* On indefinite string decoding, allow this maximum levels
+ * of recursion. Allowing infinite recursion, makes the BER
+ * decoder susceptible to stack exhaustion due to that recursion.
+ */
+#define DECODE_FLAG_LEVEL1 (1<<2)
+#define DECODE_FLAG_LEVEL2 (1<<3)
+#define DECODE_FLAG_LEVEL3 (1<<4)
+
 #define DECR_LEN(l, s) do { \
 	  l -= s; \
 	  if (l < 0) { \
@@ -2199,7 +2207,8 @@ _asn1_decode_simple_ber (unsigned int etype, const unsigned char *der,
     }
 
   /* indefinite constructed */
-  if (((dflags & DECODE_FLAG_INDEFINITE) || class == ASN1_CLASS_STRUCTURED) && ETYPE_IS_STRING(etype))
+  if (((dflags & DECODE_FLAG_INDEFINITE) || class == ASN1_CLASS_STRUCTURED) && ETYPE_IS_STRING(etype) &&
+	!(dflags & DECODE_FLAG_LEVEL3))
     {
       len_len = 1;
 
@@ -2218,9 +2227,17 @@ _asn1_decode_simple_ber (unsigned int etype, const unsigned char *der,
       /* decode the available octet strings */
       do
         {
-          unsigned tmp_len;
+	  unsigned tmp_len;
+	  unsigned flags = DECODE_FLAG_HAVE_TAG;
+
+	  if (dflags & DECODE_FLAG_LEVEL1)
+		  flags |= DECODE_FLAG_LEVEL2;
+	  else if (dflags & DECODE_FLAG_LEVEL2)
+		  flags |= DECODE_FLAG_LEVEL3;
+	  else
+		  flags |= DECODE_FLAG_LEVEL1;
 
-          result = asn1_decode_simple_ber(etype, p, der_len, &out, &out_len, &tmp_len);
+          result = _asn1_decode_simple_ber(etype, p, der_len, &out, &out_len, &tmp_len, flags);
           if (result != ASN1_SUCCESS)
             {
               warn();

